use caps_shortcut::Key;

pub trait KeyFromStr: Sized {
    fn from_str(s: &str) -> Result<Self, ()>;
}

impl KeyFromStr for Key {
    fn from_str(s: &str) -> Result<Self, ()> {
        use caps_shortcut::Key::*;

        let key = match s.to_ascii_lowercase().trim_matches('"') {
            "alt" => Alt,
            "altgr" => AltGr,
            "backspace" | "back" => Backspace,
            "capslock" | "caps" => CapsLock,
            "controlleft" | "ctrl" => ControlLeft,
            "controlright" => ControlRight,
            "delete" | "del" => Delete,
            "downarrow" | "arrowdown" => DownArrow,
            "end" => End,
            "escape" | "esc" => Escape,
            "f1" => F1,
            "f2" => F2,
            "f3" => F3,
            "f4" => F4,
            "f5" => F5,
            "f6" => F6,
            "f7" => F7,
            "f8" => F8,
            "f9" => F9,
            "f10" => F10,
            "f11" => F11,
            "f12" => F12,
            "home" => Home,
            "leftarrow" | "arrowleft" => LeftArrow,
            "metaleft" | "meta" | "win" => MetaLeft,
            "pagedown" => PageDown,
            "pageup" => PageUp,
            "return" | "enter" => Return,
            "rightarrow" | "arrowright" => RightArrow,
            "shiftleft" | "shift" => ShiftLeft,
            "shiftright" => ShiftRight,
            "space" => Space,
            "tab" => Tab,
            "uparrow" | "arrowup" => UpArrow,
            "printscreen" | "prtsc" => PrintScreen,
            "scrolllock" => ScrollLock,
            "pause" => Pause,
            "numlock" => NumLock,
            "`" | "~" | "backquote" => BackQuote,
            "1" | "num1" => Num1,
            "2" | "num2" => Num2,
            "3" | "num3" => Num3,
            "4" | "num4" => Num4,
            "5" | "num5" => Num5,
            "6" | "num6" => Num6,
            "7" | "num7" => Num7,
            "8" | "num8" => Num8,
            "9" | "num9" => Num9,
            "0" | "num0" => Num0,
            "-" | "_" | "minus" => Minus,
            "=" | "+" | "equal" => Equal,
            "q" | "keyq" => KeyQ,
            "w" | "keyw" => KeyW,
            "e" | "keye" => KeyE,
            "r" | "keyr" => KeyR,
            "t" | "keyt" => KeyT,
            "y" | "keyy" => KeyY,
            "u" | "keyu" => KeyU,
            "i" | "keyi" => KeyI,
            "o" | "keyo" => KeyO,
            "p" | "keyp" => KeyP,
            "[" | "{" | "leftbracket" => LeftBracket,
            "]" | "}" | "rightbracket" => RightBracket,
            "a" | "keya" => KeyA,
            "s" | "keys" => KeyS,
            "d" | "keyd" => KeyD,
            "f" | "keyf" => KeyF,
            "g" | "keyg" => KeyG,
            "h" | "keyh" => KeyH,
            "j" | "keyj" => KeyJ,
            "k" | "keyk" => KeyK,
            "l" | "keyl" => KeyL,
            ";" | ":" | "semicolon" => SemiColon,
            "'" | "\"" | "quote" => Quote,
            "\\" | "|" | "backslash" => BackSlash,
            "intlbackslash" => IntlBackslash,
            "z" | "keyz" => KeyZ,
            "x" | "keyx" => KeyX,
            "c" | "keyc" => KeyC,
            "v" | "keyv" => KeyV,
            "b" | "keyb" => KeyB,
            "n" | "keyn" => KeyN,
            "m" | "keym" => KeyM,
            "," | "<" | "comma" => Comma,
            "." | ">" | "dot" => Dot,
            "/" | "?" | "slash" => Slash,
            "insert" | "ins" => Insert,
            //KP_RETURN, 13,
            "kpminus" => KpMinus,
            "kpplus" => KpPlus,
            "kpmultiply" => KpMultiply,
            "kpdivide" => KpDivide,
            "kp0" => Kp0,
            "kp1" => Kp1,
            "kp2" => Kp2,
            "kp3" => Kp3,
            "kp4" => Kp4,
            "kp5" => Kp5,
            "kp6" => Kp6,
            "kp7" => Kp7,
            "kp8" => Kp8,
            "kp9" => Kp9,
            "kpdelete" => KpDelete,
            "metaright" => MetaRight,
            "kpreturn" => KpReturn,
            "function" => Function,
            _ => return Err(())
        };
        
        Ok(key)
    }
}